# source: http://localhost:4466/naperg/dev
# timestamp: Mon Sep 10 2018 14:17:22 GMT+0300 (MSK)

type AggregateCar {
  count: Int!
}

type AggregateChapter {
  count: Int!
}

type AggregateChat {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateusersCourse {
  count: Int!
}

type AggregateWishlist {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Car implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type CarConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CarEdge]!
  aggregate: AggregateCar!
}

input CarCreateInput {
  name: String!
}

input CarCreateManyInput {
  create: [CarCreateInput!]
  connect: [CarWhereUniqueInput!]
}

"""An edge in a connection."""
type CarEdge {
  """The item at the end of the edge."""
  node: Car!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CarOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CarPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
}

type CarSubscriptionPayload {
  mutation: MutationType!
  node: Car
  updatedFields: [String!]
  previousValues: CarPreviousValues
}

input CarSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CarSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CarSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CarSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CarWhereInput
}

input CarUpdateDataInput {
  name: String
}

input CarUpdateInput {
  name: String
}

input CarUpdateManyInput {
  create: [CarCreateInput!]
  connect: [CarWhereUniqueInput!]
  disconnect: [CarWhereUniqueInput!]
  delete: [CarWhereUniqueInput!]
  update: [CarUpdateWithWhereUniqueNestedInput!]
  upsert: [CarUpsertWithWhereUniqueNestedInput!]
}

input CarUpdateWithWhereUniqueNestedInput {
  where: CarWhereUniqueInput!
  data: CarUpdateDataInput!
}

input CarUpsertWithWhereUniqueNestedInput {
  where: CarWhereUniqueInput!
  update: CarUpdateDataInput!
  create: CarCreateInput!
}

input CarWhereInput {
  """Logical AND on all given filters."""
  AND: [CarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

input CarWhereUniqueInput {
  id: ID
}

type Chapter implements Node {
  id: ID!
  name: String!
  description: String
  courseBy(where: PostWhereInput): Post
  files: String
  createdAt: DateTime!
}

"""A connection to a list of items."""
type ChapterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChapterEdge]!
  aggregate: AggregateChapter!
}

input ChapterCreateInput {
  name: String!
  description: String
  files: String
  courseBy: PostCreateOneWithoutChaptersInput
}

input ChapterCreateManyWithoutCourseByInput {
  create: [ChapterCreateWithoutCourseByInput!]
  connect: [ChapterWhereUniqueInput!]
}

input ChapterCreateWithoutCourseByInput {
  name: String!
  description: String
  files: String
}

"""An edge in a connection."""
type ChapterEdge {
  """The item at the end of the edge."""
  node: Chapter!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChapterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  files_ASC
  files_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ChapterPreviousValues {
  id: ID!
  name: String!
  description: String
  files: String
  createdAt: DateTime!
}

type ChapterSubscriptionPayload {
  mutation: MutationType!
  node: Chapter
  updatedFields: [String!]
  previousValues: ChapterPreviousValues
}

input ChapterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChapterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChapterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChapterSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChapterWhereInput
}

input ChapterUpdateInput {
  name: String
  description: String
  files: String
  courseBy: PostUpdateOneWithoutChaptersInput
}

input ChapterUpdateManyWithoutCourseByInput {
  create: [ChapterCreateWithoutCourseByInput!]
  connect: [ChapterWhereUniqueInput!]
  disconnect: [ChapterWhereUniqueInput!]
  delete: [ChapterWhereUniqueInput!]
  update: [ChapterUpdateWithWhereUniqueWithoutCourseByInput!]
  upsert: [ChapterUpsertWithWhereUniqueWithoutCourseByInput!]
}

input ChapterUpdateWithoutCourseByDataInput {
  name: String
  description: String
  files: String
}

input ChapterUpdateWithWhereUniqueWithoutCourseByInput {
  where: ChapterWhereUniqueInput!
  data: ChapterUpdateWithoutCourseByDataInput!
}

input ChapterUpsertWithWhereUniqueWithoutCourseByInput {
  where: ChapterWhereUniqueInput!
  update: ChapterUpdateWithoutCourseByDataInput!
  create: ChapterCreateWithoutCourseByInput!
}

input ChapterWhereInput {
  """Logical AND on all given filters."""
  AND: [ChapterWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChapterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChapterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  files: String

  """All values that are not equal to given value."""
  files_not: String

  """All values that are contained in given list."""
  files_in: [String!]

  """All values that are not contained in given list."""
  files_not_in: [String!]

  """All values less than the given value."""
  files_lt: String

  """All values less than or equal the given value."""
  files_lte: String

  """All values greater than the given value."""
  files_gt: String

  """All values greater than or equal the given value."""
  files_gte: String

  """All values containing the given string."""
  files_contains: String

  """All values not containing the given string."""
  files_not_contains: String

  """All values starting with the given string."""
  files_starts_with: String

  """All values not starting with the given string."""
  files_not_starts_with: String

  """All values ending with the given string."""
  files_ends_with: String

  """All values not ending with the given string."""
  files_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  courseBy: PostWhereInput
}

input ChapterWhereUniqueInput {
  id: ID
}

type Chat implements Node {
  id: ID!
  message: String!
  author(where: UserWhereInput): User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ChatConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatEdge]!
  aggregate: AggregateChat!
}

input ChatCreateInput {
  message: String!
  author: UserCreateOneInput
}

"""An edge in a connection."""
type ChatEdge {
  """The item at the end of the edge."""
  node: Chat!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ChatPreviousValues {
  id: ID!
  message: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ChatSubscriptionPayload {
  mutation: MutationType!
  node: Chat
  updatedFields: [String!]
  previousValues: ChatPreviousValues
}

input ChatSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatWhereInput
}

input ChatUpdateInput {
  message: String
  author: UserUpdateOneInput
}

input ChatWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  message: String

  """All values that are not equal to given value."""
  message_not: String

  """All values that are contained in given list."""
  message_in: [String!]

  """All values that are not contained in given list."""
  message_not_in: [String!]

  """All values less than the given value."""
  message_lt: String

  """All values less than or equal the given value."""
  message_lte: String

  """All values greater than the given value."""
  message_gt: String

  """All values greater than or equal the given value."""
  message_gte: String

  """All values containing the given string."""
  message_contains: String

  """All values not containing the given string."""
  message_not_contains: String

  """All values starting with the given string."""
  message_starts_with: String

  """All values not starting with the given string."""
  message_not_starts_with: String

  """All values ending with the given string."""
  message_ends_with: String

  """All values not ending with the given string."""
  message_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: UserWhereInput
}

input ChatWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createChapter(data: ChapterCreateInput!): Chapter!
  createWishlist(data: WishlistCreateInput!): Wishlist!
  createusersCourse(data: usersCourseCreateInput!): usersCourse!
  createCar(data: CarCreateInput!): Car!
  createChat(data: ChatCreateInput!): Chat!
  createUser(data: UserCreateInput!): User!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateChapter(data: ChapterUpdateInput!, where: ChapterWhereUniqueInput!): Chapter
  updateWishlist(data: WishlistUpdateInput!, where: WishlistWhereUniqueInput!): Wishlist
  updateusersCourse(data: usersCourseUpdateInput!, where: usersCourseWhereUniqueInput!): usersCourse
  updateCar(data: CarUpdateInput!, where: CarWhereUniqueInput!): Car
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deletePost(where: PostWhereUniqueInput!): Post
  deleteChapter(where: ChapterWhereUniqueInput!): Chapter
  deleteWishlist(where: WishlistWhereUniqueInput!): Wishlist
  deleteusersCourse(where: usersCourseWhereUniqueInput!): usersCourse
  deleteCar(where: CarWhereUniqueInput!): Car
  deleteChat(where: ChatWhereUniqueInput!): Chat
  deleteUser(where: UserWhereUniqueInput!): User
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertChapter(where: ChapterWhereUniqueInput!, create: ChapterCreateInput!, update: ChapterUpdateInput!): Chapter!
  upsertWishlist(where: WishlistWhereUniqueInput!, create: WishlistCreateInput!, update: WishlistUpdateInput!): Wishlist!
  upsertusersCourse(where: usersCourseWhereUniqueInput!, create: usersCourseCreateInput!, update: usersCourseUpdateInput!): usersCourse!
  upsertCar(where: CarWhereUniqueInput!, create: CarCreateInput!, update: CarUpdateInput!): Car!
  upsertChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput): BatchPayload!
  updateManyChapters(data: ChapterUpdateInput!, where: ChapterWhereInput): BatchPayload!
  updateManyWishlists(data: WishlistUpdateInput!, where: WishlistWhereInput): BatchPayload!
  updateManyUsersCourses(data: usersCourseUpdateInput!, where: usersCourseWhereInput): BatchPayload!
  updateManyCars(data: CarUpdateInput!, where: CarWhereInput): BatchPayload!
  updateManyChats(data: ChatUpdateInput!, where: ChatWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyChapters(where: ChapterWhereInput): BatchPayload!
  deleteManyWishlists(where: WishlistWhereInput): BatchPayload!
  deleteManyUsersCourses(where: usersCourseWhereInput): BatchPayload!
  deleteManyCars(where: CarWhereInput): BatchPayload!
  deleteManyChats(where: ChatWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
  nameFile: String!
  author(where: UserWhereInput): User
  cars(where: CarWhereInput, orderBy: CarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Car!]
  chapters(where: ChapterWhereInput, orderBy: ChapterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chapter!]
  createdAt: DateTime!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  nameFile: String!
  author: UserCreateOneWithoutPostsInput
  cars: CarCreateManyInput
  chapters: ChapterCreateManyWithoutCourseByInput
}

input PostCreateManyInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutChaptersInput {
  create: PostCreateWithoutChaptersInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  isPublished: Boolean
  title: String!
  text: String!
  nameFile: String!
  cars: CarCreateManyInput
  chapters: ChapterCreateManyWithoutCourseByInput
}

input PostCreateWithoutChaptersInput {
  isPublished: Boolean
  title: String!
  text: String!
  nameFile: String!
  author: UserCreateOneWithoutPostsInput
  cars: CarCreateManyInput
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  nameFile_ASC
  nameFile_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
  nameFile: String!
  createdAt: DateTime!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateDataInput {
  isPublished: Boolean
  title: String
  text: String
  nameFile: String
  author: UserUpdateOneWithoutPostsInput
  cars: CarUpdateManyInput
  chapters: ChapterUpdateManyWithoutCourseByInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  nameFile: String
  author: UserUpdateOneWithoutPostsInput
  cars: CarUpdateManyInput
  chapters: ChapterUpdateManyWithoutCourseByInput
}

input PostUpdateManyInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueNestedInput!]
  upsert: [PostUpsertWithWhereUniqueNestedInput!]
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateOneWithoutChaptersInput {
  create: PostCreateWithoutChaptersInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PostUpdateWithoutChaptersDataInput
  upsert: PostUpsertWithoutChaptersInput
}

input PostUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  text: String
  nameFile: String
  cars: CarUpdateManyInput
  chapters: ChapterUpdateManyWithoutCourseByInput
}

input PostUpdateWithoutChaptersDataInput {
  isPublished: Boolean
  title: String
  text: String
  nameFile: String
  author: UserUpdateOneWithoutPostsInput
  cars: CarUpdateManyInput
}

input PostUpdateWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput!
  data: PostUpdateDataInput!
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutChaptersInput {
  update: PostUpdateWithoutChaptersDataInput!
  create: PostCreateWithoutChaptersInput!
}

input PostUpsertWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput!
  update: PostUpdateDataInput!
  create: PostCreateInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  nameFile: String

  """All values that are not equal to given value."""
  nameFile_not: String

  """All values that are contained in given list."""
  nameFile_in: [String!]

  """All values that are not contained in given list."""
  nameFile_not_in: [String!]

  """All values less than the given value."""
  nameFile_lt: String

  """All values less than or equal the given value."""
  nameFile_lte: String

  """All values greater than the given value."""
  nameFile_gt: String

  """All values greater than or equal the given value."""
  nameFile_gte: String

  """All values containing the given string."""
  nameFile_contains: String

  """All values not containing the given string."""
  nameFile_not_contains: String

  """All values starting with the given string."""
  nameFile_starts_with: String

  """All values not starting with the given string."""
  nameFile_not_starts_with: String

  """All values ending with the given string."""
  nameFile_ends_with: String

  """All values not ending with the given string."""
  nameFile_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  cars_every: CarWhereInput
  cars_some: CarWhereInput
  cars_none: CarWhereInput
  chapters_every: ChapterWhereInput
  chapters_some: ChapterWhereInput
  chapters_none: ChapterWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  chapters(where: ChapterWhereInput, orderBy: ChapterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chapter]!
  wishlists(where: WishlistWhereInput, orderBy: WishlistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Wishlist]!
  usersCourses(where: usersCourseWhereInput, orderBy: usersCourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [usersCourse]!
  cars(where: CarWhereInput, orderBy: CarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Car]!
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  post(where: PostWhereUniqueInput!): Post
  chapter(where: ChapterWhereUniqueInput!): Chapter
  wishlist(where: WishlistWhereUniqueInput!): Wishlist
  usersCourse(where: usersCourseWhereUniqueInput!): usersCourse
  car(where: CarWhereUniqueInput!): Car
  chat(where: ChatWhereUniqueInput!): Chat
  user(where: UserWhereUniqueInput!): User
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  chaptersConnection(where: ChapterWhereInput, orderBy: ChapterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChapterConnection!
  wishlistsConnection(where: WishlistWhereInput, orderBy: WishlistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WishlistConnection!
  usersCoursesConnection(where: usersCourseWhereInput, orderBy: usersCourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): usersCourseConnection!
  carsConnection(where: CarWhereInput, orderBy: CarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CarConnection!
  chatsConnection(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Role {
  ADMIN
  CUSTOMER
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  chapter(where: ChapterSubscriptionWhereInput): ChapterSubscriptionPayload
  wishlist(where: WishlistSubscriptionWhereInput): WishlistSubscriptionPayload
  usersCourse(where: usersCourseSubscriptionWhereInput): usersCourseSubscriptionPayload
  car(where: CarSubscriptionWhereInput): CarSubscriptionPayload
  chat(where: ChatSubscriptionWhereInput): ChatSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  emailvalidated: Boolean!
  validateEmailToken: String!
  password: String!
  nameFile: String!
  resetPasswordToken: String!
  resetPasswordExpires: Float
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  wishlist(where: WishlistWhereInput, orderBy: WishlistOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Wishlist!]
  usersCourse(where: usersCourseWhereInput, orderBy: usersCourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [usersCourse!]
  role: Role!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  emailvalidated: Boolean
  validateEmailToken: String!
  password: String!
  nameFile: String!
  resetPasswordToken: String!
  resetPasswordExpires: Float
  name: String!
  role: Role
  posts: PostCreateManyWithoutAuthorInput
  wishlist: WishlistCreateManyWithoutUserIdInput
  usersCourse: usersCourseCreateManyWithoutUserIdInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUsersCourseInput {
  create: UserCreateWithoutUsersCourseInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutWishlistInput {
  create: UserCreateWithoutWishlistInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  email: String!
  emailvalidated: Boolean
  validateEmailToken: String!
  password: String!
  nameFile: String!
  resetPasswordToken: String!
  resetPasswordExpires: Float
  name: String!
  role: Role
  wishlist: WishlistCreateManyWithoutUserIdInput
  usersCourse: usersCourseCreateManyWithoutUserIdInput
}

input UserCreateWithoutUsersCourseInput {
  email: String!
  emailvalidated: Boolean
  validateEmailToken: String!
  password: String!
  nameFile: String!
  resetPasswordToken: String!
  resetPasswordExpires: Float
  name: String!
  role: Role
  posts: PostCreateManyWithoutAuthorInput
  wishlist: WishlistCreateManyWithoutUserIdInput
}

input UserCreateWithoutWishlistInput {
  email: String!
  emailvalidated: Boolean
  validateEmailToken: String!
  password: String!
  nameFile: String!
  resetPasswordToken: String!
  resetPasswordExpires: Float
  name: String!
  role: Role
  posts: PostCreateManyWithoutAuthorInput
  usersCourse: usersCourseCreateManyWithoutUserIdInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  emailvalidated_ASC
  emailvalidated_DESC
  validateEmailToken_ASC
  validateEmailToken_DESC
  password_ASC
  password_DESC
  nameFile_ASC
  nameFile_DESC
  resetPasswordToken_ASC
  resetPasswordToken_DESC
  resetPasswordExpires_ASC
  resetPasswordExpires_DESC
  name_ASC
  name_DESC
  role_ASC
  role_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  emailvalidated: Boolean!
  validateEmailToken: String!
  password: String!
  nameFile: String!
  resetPasswordToken: String!
  resetPasswordExpires: Float
  name: String!
  role: Role!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type usersCourse implements Node {
  id: ID!
  courseId(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  userId(where: UserWhereInput): User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type usersCourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [usersCourseEdge]!
  aggregate: AggregateusersCourse!
}

input usersCourseCreateInput {
  courseId: PostCreateManyInput
  userId: UserCreateOneWithoutUsersCourseInput!
}

input usersCourseCreateManyWithoutUserIdInput {
  create: [usersCourseCreateWithoutUserIdInput!]
  connect: [usersCourseWhereUniqueInput!]
}

input usersCourseCreateWithoutUserIdInput {
  courseId: PostCreateManyInput
}

"""An edge in a connection."""
type usersCourseEdge {
  """The item at the end of the edge."""
  node: usersCourse!

  """A cursor for use in pagination."""
  cursor: String!
}

enum usersCourseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type usersCoursePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type usersCourseSubscriptionPayload {
  mutation: MutationType!
  node: usersCourse
  updatedFields: [String!]
  previousValues: usersCoursePreviousValues
}

input usersCourseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [usersCourseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [usersCourseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [usersCourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: usersCourseWhereInput
}

input usersCourseUpdateInput {
  courseId: PostUpdateManyInput
  userId: UserUpdateOneWithoutUsersCourseInput
}

input usersCourseUpdateManyWithoutUserIdInput {
  create: [usersCourseCreateWithoutUserIdInput!]
  connect: [usersCourseWhereUniqueInput!]
  disconnect: [usersCourseWhereUniqueInput!]
  delete: [usersCourseWhereUniqueInput!]
  update: [usersCourseUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [usersCourseUpsertWithWhereUniqueWithoutUserIdInput!]
}

input usersCourseUpdateWithoutUserIdDataInput {
  courseId: PostUpdateManyInput
}

input usersCourseUpdateWithWhereUniqueWithoutUserIdInput {
  where: usersCourseWhereUniqueInput!
  data: usersCourseUpdateWithoutUserIdDataInput!
}

input usersCourseUpsertWithWhereUniqueWithoutUserIdInput {
  where: usersCourseWhereUniqueInput!
  update: usersCourseUpdateWithoutUserIdDataInput!
  create: usersCourseCreateWithoutUserIdInput!
}

input usersCourseWhereInput {
  """Logical AND on all given filters."""
  AND: [usersCourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [usersCourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [usersCourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  courseId_every: PostWhereInput
  courseId_some: PostWhereInput
  courseId_none: PostWhereInput
  userId: UserWhereInput
}

input usersCourseWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  emailvalidated: Boolean
  validateEmailToken: String
  password: String
  nameFile: String
  resetPasswordToken: String
  resetPasswordExpires: Float
  name: String
  role: Role
  posts: PostUpdateManyWithoutAuthorInput
  wishlist: WishlistUpdateManyWithoutUserIdInput
  usersCourse: usersCourseUpdateManyWithoutUserIdInput
}

input UserUpdateInput {
  email: String
  emailvalidated: Boolean
  validateEmailToken: String
  password: String
  nameFile: String
  resetPasswordToken: String
  resetPasswordExpires: Float
  name: String
  role: Role
  posts: PostUpdateManyWithoutAuthorInput
  wishlist: WishlistUpdateManyWithoutUserIdInput
  usersCourse: usersCourseUpdateManyWithoutUserIdInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneWithoutUsersCourseInput {
  create: UserCreateWithoutUsersCourseInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutUsersCourseDataInput
  upsert: UserUpsertWithoutUsersCourseInput
}

input UserUpdateOneWithoutWishlistInput {
  create: UserCreateWithoutWishlistInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutWishlistDataInput
  upsert: UserUpsertWithoutWishlistInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  emailvalidated: Boolean
  validateEmailToken: String
  password: String
  nameFile: String
  resetPasswordToken: String
  resetPasswordExpires: Float
  name: String
  role: Role
  wishlist: WishlistUpdateManyWithoutUserIdInput
  usersCourse: usersCourseUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutUsersCourseDataInput {
  email: String
  emailvalidated: Boolean
  validateEmailToken: String
  password: String
  nameFile: String
  resetPasswordToken: String
  resetPasswordExpires: Float
  name: String
  role: Role
  posts: PostUpdateManyWithoutAuthorInput
  wishlist: WishlistUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutWishlistDataInput {
  email: String
  emailvalidated: Boolean
  validateEmailToken: String
  password: String
  nameFile: String
  resetPasswordToken: String
  resetPasswordExpires: Float
  name: String
  role: Role
  posts: PostUpdateManyWithoutAuthorInput
  usersCourse: usersCourseUpdateManyWithoutUserIdInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutUsersCourseInput {
  update: UserUpdateWithoutUsersCourseDataInput!
  create: UserCreateWithoutUsersCourseInput!
}

input UserUpsertWithoutWishlistInput {
  update: UserUpdateWithoutWishlistDataInput!
  create: UserCreateWithoutWishlistInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  emailvalidated: Boolean

  """All values that are not equal to given value."""
  emailvalidated_not: Boolean
  validateEmailToken: String

  """All values that are not equal to given value."""
  validateEmailToken_not: String

  """All values that are contained in given list."""
  validateEmailToken_in: [String!]

  """All values that are not contained in given list."""
  validateEmailToken_not_in: [String!]

  """All values less than the given value."""
  validateEmailToken_lt: String

  """All values less than or equal the given value."""
  validateEmailToken_lte: String

  """All values greater than the given value."""
  validateEmailToken_gt: String

  """All values greater than or equal the given value."""
  validateEmailToken_gte: String

  """All values containing the given string."""
  validateEmailToken_contains: String

  """All values not containing the given string."""
  validateEmailToken_not_contains: String

  """All values starting with the given string."""
  validateEmailToken_starts_with: String

  """All values not starting with the given string."""
  validateEmailToken_not_starts_with: String

  """All values ending with the given string."""
  validateEmailToken_ends_with: String

  """All values not ending with the given string."""
  validateEmailToken_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  nameFile: String

  """All values that are not equal to given value."""
  nameFile_not: String

  """All values that are contained in given list."""
  nameFile_in: [String!]

  """All values that are not contained in given list."""
  nameFile_not_in: [String!]

  """All values less than the given value."""
  nameFile_lt: String

  """All values less than or equal the given value."""
  nameFile_lte: String

  """All values greater than the given value."""
  nameFile_gt: String

  """All values greater than or equal the given value."""
  nameFile_gte: String

  """All values containing the given string."""
  nameFile_contains: String

  """All values not containing the given string."""
  nameFile_not_contains: String

  """All values starting with the given string."""
  nameFile_starts_with: String

  """All values not starting with the given string."""
  nameFile_not_starts_with: String

  """All values ending with the given string."""
  nameFile_ends_with: String

  """All values not ending with the given string."""
  nameFile_not_ends_with: String
  resetPasswordToken: String

  """All values that are not equal to given value."""
  resetPasswordToken_not: String

  """All values that are contained in given list."""
  resetPasswordToken_in: [String!]

  """All values that are not contained in given list."""
  resetPasswordToken_not_in: [String!]

  """All values less than the given value."""
  resetPasswordToken_lt: String

  """All values less than or equal the given value."""
  resetPasswordToken_lte: String

  """All values greater than the given value."""
  resetPasswordToken_gt: String

  """All values greater than or equal the given value."""
  resetPasswordToken_gte: String

  """All values containing the given string."""
  resetPasswordToken_contains: String

  """All values not containing the given string."""
  resetPasswordToken_not_contains: String

  """All values starting with the given string."""
  resetPasswordToken_starts_with: String

  """All values not starting with the given string."""
  resetPasswordToken_not_starts_with: String

  """All values ending with the given string."""
  resetPasswordToken_ends_with: String

  """All values not ending with the given string."""
  resetPasswordToken_not_ends_with: String
  resetPasswordExpires: Float

  """All values that are not equal to given value."""
  resetPasswordExpires_not: Float

  """All values that are contained in given list."""
  resetPasswordExpires_in: [Float!]

  """All values that are not contained in given list."""
  resetPasswordExpires_not_in: [Float!]

  """All values less than the given value."""
  resetPasswordExpires_lt: Float

  """All values less than or equal the given value."""
  resetPasswordExpires_lte: Float

  """All values greater than the given value."""
  resetPasswordExpires_gt: Float

  """All values greater than or equal the given value."""
  resetPasswordExpires_gte: Float
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  role: Role

  """All values that are not equal to given value."""
  role_not: Role

  """All values that are contained in given list."""
  role_in: [Role!]

  """All values that are not contained in given list."""
  role_not_in: [Role!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  wishlist_every: WishlistWhereInput
  wishlist_some: WishlistWhereInput
  wishlist_none: WishlistWhereInput
  usersCourse_every: usersCourseWhereInput
  usersCourse_some: usersCourseWhereInput
  usersCourse_none: usersCourseWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  validateEmailToken: String
  resetPasswordToken: String
}

type Wishlist implements Node {
  id: ID!
  courseId(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  userId(where: UserWhereInput): User!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type WishlistConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WishlistEdge]!
  aggregate: AggregateWishlist!
}

input WishlistCreateInput {
  courseId: PostCreateManyInput
  userId: UserCreateOneWithoutWishlistInput!
}

input WishlistCreateManyWithoutUserIdInput {
  create: [WishlistCreateWithoutUserIdInput!]
  connect: [WishlistWhereUniqueInput!]
}

input WishlistCreateWithoutUserIdInput {
  courseId: PostCreateManyInput
}

"""An edge in a connection."""
type WishlistEdge {
  """The item at the end of the edge."""
  node: Wishlist!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WishlistOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WishlistPreviousValues {
  id: ID!
  createdAt: DateTime!
}

type WishlistSubscriptionPayload {
  mutation: MutationType!
  node: Wishlist
  updatedFields: [String!]
  previousValues: WishlistPreviousValues
}

input WishlistSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WishlistSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WishlistSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WishlistSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WishlistWhereInput
}

input WishlistUpdateInput {
  courseId: PostUpdateManyInput
  userId: UserUpdateOneWithoutWishlistInput
}

input WishlistUpdateManyWithoutUserIdInput {
  create: [WishlistCreateWithoutUserIdInput!]
  connect: [WishlistWhereUniqueInput!]
  disconnect: [WishlistWhereUniqueInput!]
  delete: [WishlistWhereUniqueInput!]
  update: [WishlistUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [WishlistUpsertWithWhereUniqueWithoutUserIdInput!]
}

input WishlistUpdateWithoutUserIdDataInput {
  courseId: PostUpdateManyInput
}

input WishlistUpdateWithWhereUniqueWithoutUserIdInput {
  where: WishlistWhereUniqueInput!
  data: WishlistUpdateWithoutUserIdDataInput!
}

input WishlistUpsertWithWhereUniqueWithoutUserIdInput {
  where: WishlistWhereUniqueInput!
  update: WishlistUpdateWithoutUserIdDataInput!
  create: WishlistCreateWithoutUserIdInput!
}

input WishlistWhereInput {
  """Logical AND on all given filters."""
  AND: [WishlistWhereInput!]

  """Logical OR on all given filters."""
  OR: [WishlistWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WishlistWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  courseId_every: PostWhereInput
  courseId_some: PostWhereInput
  courseId_none: PostWhereInput
  userId: UserWhereInput
}

input WishlistWhereUniqueInput {
  id: ID
}
