# import User, Query.usersConnection, Query.user, Mutation.updateUser, Mutation.createUser from "./generated-schema.graphql"
# import Car, CarCreateInput, CarWhereInput, CarOrderByInput from "./generated-schema.graphql"
# import Query.car, Mutation.deleteCar, Query.carsConnection from "./generated-schema.graphql"
# import Subscription.chat from "./generated-schema.graphql"
# import Mutation.createPost, Post from "./generated-schema.graphql"
# import Mutation.createChat, Query.chatsConnection, Query.chat from "./generated-schema.graphql"
# import Chapter, ChapterCreateInput from "./generated-schema.graphql"
# import Wishlist from "./generated-schema.graphql"
# import Courselist from "./generated-schema.graphql"
# import ChapterDescription from "./generated-schema.graphql"
# import ChapterFile from "./generated-schema.graphql"


type Query {
  me: User
  feed: [Post!]!
  drafts(orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]!
  post(id: ID!): Post
  wishlist(userId: ID!): [Wishlist!]!
  courselist(userId: ID!): [Courselist!]!
  chapters: [Chapter!]!
  chapter(id: ID!): Chapter!
}

type Mutation {
  signup(email: String!, password: String!, name: String!, nameFile: String!): AuthPayload!
  resetPassword(password: String!, resetPasswordToken: String!): AuthPayload!
  sendLinkValidateEmail: User!
  validateEmail(validateEmailToken: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  deletePost(id: ID!): Post
  deleteUser(id: ID!): User
  publish(id: ID!): Post
  createCar(data: CarCreateInput!): Car!
  updateCar(data: CarUpdateInput!, where: CarWhereUniqueInput!): Car
  updatePassword(oldPassword: String, newPassword: String!): User!
  forgetPassword(email: String!): User!
  createWishlist(courseId: ID!, userId: ID!): Wishlist!
  deleteWishlist(id: ID!, courseId:ID!, userId:ID!):  Wishlist!
  createCourselist(courseId: ID!, userId: ID!): Courselist!
  createChapter(name: String!, courseBy: ID!, files: String): Chapter!
  deleteChapter(id: ID!): Chapter!
  createChapterDescription(chapterId: ID!, title: String! text: String!): ChapterDescription!
  deleteChapterDescription(id: ID!): ChapterDescription!
  createChapterFile(chapterId: ID!, title: String! src: String!): ChapterFile!
}

type AuthPayload {
  token: String!
  user: User!
}

